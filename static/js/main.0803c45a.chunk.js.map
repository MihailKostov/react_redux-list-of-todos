{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","api.ts","types/FilterType.ts","utils.ts","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","query","status","initialState","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppSelector","useDispatch","useSelector","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","FilterType","TodoItem","id","title","completed","dispatch","className","classNames","onClick","currentTodoActions","TodoList","memo","visibleTodos","ALL","ACTIVE","COMPLETED","Error","toLowerCase","includes","getVisibleTodos","length","map","TodoFilter","handleStatus","useCallback","event","value","target","filterActions","onSubmit","preventDefault","onChange","placeholder","style","pointerEvents","Loader","TodoModal","useState","user","setUser","isLoading","setIsLoading","useEffect","userId","data","finally","href","name","App","todosActions","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0803c45a.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\ntype SetTodoAction = { type: 'currentTodo/SET', payload: Todo };\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\nexport const actions = { setTodo, removeTodo };\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/REMOVE':\n      return null;\n\n    case 'currentTodo/SET':\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype StatusFilterAction = { type: 'filter/SET_STATUS', payload: Status };\ntype QueryFilterAction = { type: 'filter/SET_QUERY', payload: string };\ntype ClearQueryAction = { type: 'filter/CLEAR_QUERY' };\ntype Action = StatusFilterAction | QueryFilterAction | ClearQueryAction;\n\nconst setStatusFilter = (status: Status): StatusFilterAction => ({\n  type: 'filter/SET_STATUS',\n  payload: status,\n});\nconst setQueryFilter = (query: string): QueryFilterAction => ({\n  type: 'filter/SET_QUERY',\n  payload: query,\n});\nconst ClearQuery = (): ClearQueryAction => ({ type: 'filter/CLEAR_QUERY' });\n\nexport const actions = { setQueryFilter, setStatusFilter, ClearQuery };\n\ntype State = { query: string, status: Status };\n\nconst initialState: State = { query: '', status: 'all' };\n\nconst filterReducer = (\n  state: State = initialState,\n  action: Action,\n) => {\n  switch (action.type) {\n    case 'filter/SET_STATUS':\n      return { ...state, status: action.payload };\n\n    case 'filter/SET_QUERY':\n      return { ...state, query: action.payload };\n\n    case 'filter/CLEAR_QUERY':\n      return { ...state, query: '' };\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = { type: 'currentTodos/SET', payload: Todo[] };\n\nconst setTodos = (todos: Todo[]): SetTodosAction => ({\n  type: 'currentTodos/SET',\n  payload: todos,\n});\n\nexport const actions = { setTodos };\n\nconst todosReducer = (\n  state: Todo[] = [],\n  action: SetTodosAction,\n): Todo[] => {\n  switch (action.type) {\n    case 'currentTodos/SET':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export enum FilterType {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","import { FilterType } from './types/FilterType';\nimport { Status } from './types/Status';\nimport { Todo } from './types/Todo';\n\nexport const getVisibleTodos = (\n  todos: Todo[],\n  status: Status,\n  query: string,\n) => {\n  return todos.filter((todo: Todo) => {\n    switch (status) {\n      case FilterType.ALL:\n        return todo;\n\n      case FilterType.ACTIVE:\n        return !todo.completed;\n\n      case FilterType.COMPLETED:\n        return todo.completed;\n\n      default:\n        throw new Error('Error');\n    }\n  }).filter(todo => todo.title.toLowerCase().includes(query.toLowerCase()));\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todo: Todo,\n};\n\nexport const TodoItem: React.FC<Props> = ({ todo }) => {\n  const { id, title, completed } = todo;\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useDispatch();\n\n  return (\n    <tr data-cy=\"todo\">\n      <td className=\"is-vcentered\">{id}</td>\n      <td className=\"is-vcentered\">\n        {completed && (\n          <span className=\"icon\" data-cy=\"iconCompleted\">\n            <i className=\"fas fa-check\" />\n          </span>\n        )}\n      </td>\n\n      <td className=\"is-vcentered is-expanded\">\n        <p className={classNames(\n          {\n            'has-text-danger': !completed,\n            'has-text-success': completed,\n          },\n        )}\n        >\n          {title}\n        </p>\n      </td>\n\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          data-cy=\"selectButton\"\n          className=\"button\"\n          type=\"button\"\n          onClick={() => dispatch(currentTodoActions.setTodo(todo))}\n        >\n          <span className=\"icon\">\n            <i className={classNames(\n              'far',\n              {\n                'fa-eye': currentTodo?.id !== id,\n                'fa-eye-slash': currentTodo?.id === id,\n              },\n            )}\n            />\n          </span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import React, { memo } from 'react';\nimport { useAppSelector } from '../../app/hooks';\nimport { getVisibleTodos } from '../../utils';\nimport { TodoItem } from '../TodoItem';\n\nexport const TodoList: React.FC = memo(() => {\n  const todos = useAppSelector(state => state.todos);\n  const { query, status } = useAppSelector(state => state.filter);\n  const visibleTodos = getVisibleTodos(todos, status, query);\n\n  return (\n    <>\n      {visibleTodos.length === 0 ? (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      )\n        : (\n          <table className=\"table is-narrow is-fullwidth\">\n            <thead>\n              <tr>\n                <th>#</th>\n\n                <th>\n                  <span className=\"icon\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                </th>\n\n                <th>Title</th>\n                <th> </th>\n              </tr>\n            </thead>\n\n            <tbody>\n              {visibleTodos.map(todo => (\n                <TodoItem key={todo.id} todo={todo} />\n              ))}\n            </tbody>\n          </table>\n        )}\n    </>\n  );\n});\n","import React, { ChangeEvent, useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const { query, status } = useAppSelector(state => state.filter);\n  const dispatch = useDispatch();\n\n  const handleSetQuery = (event: ChangeEvent<HTMLInputElement>) => {\n    dispatch(filterActions.setQueryFilter(event.target.value));\n  };\n\n  const handleClearQuery = () => {\n    dispatch(filterActions.ClearQuery());\n  };\n\n  const handleStatus = useCallback((event: ChangeEvent<HTMLSelectElement>) => {\n    const value = event.target.value as Status;\n\n    dispatch(filterActions.setStatusFilter(value));\n  }, []);\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={handleStatus}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleSetQuery}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={handleClearQuery}\n          />\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { memo, useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Loader } from '../Loader';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\nimport { useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\nexport const TodoModal: React.FC = memo(() => {\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    if (currentTodo) {\n      getUser(currentTodo?.userId)\n        .then(data => setUser(data))\n        .finally(() => setIsLoading(false));\n    }\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading\n        ? <Loader />\n        : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${currentTodo?.id}`}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={() => dispatch(currentTodoActions.removeTodo())}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {currentTodo?.title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                {currentTodo?.completed\n                  ? <strong className=\"has-text-success\">Done</strong>\n                  : <strong className=\"has-text-danger\">Planned</strong>}\n                {' by '}\n                <a href={`mailto:${user?.name}`}>{user?.name}</a>\n              </p>\n            </div>\n          </div>\n        )}\n    </div>\n  );\n});\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from './app/hooks';\nimport { getTodos } from './api';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { actions as todosActions } from './features/todos';\n\nexport const App: React.FC = () => {\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const [isLoading, setIsLoading] = useState(false);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    setIsLoading(true);\n    getTodos()\n      .then(data => dispatch(todosActions.setTodos(data)))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading\n                ? <Loader />\n                : <TodoList />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}